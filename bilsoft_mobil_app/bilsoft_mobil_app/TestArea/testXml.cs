// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using CodeBeautify;
//
//    var testXml = testXml.FromJson(jsonString);

namespace bilsoft_mobil_app.TestArea
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class testXml
    {
        [JsonProperty("Report")]
        public Report Report { get; set; }
    }

    public partial class Report
    {
        [JsonProperty("Dictionary")]
        public Dictionary Dictionary { get; set; }

        [JsonProperty("ReportPage")]
        public ReportPage ReportPage { get; set; }

        [JsonProperty("_ScriptLanguage")]
        public string ScriptLanguage { get; set; }

        [JsonProperty("_ReportInfo.Created")]
        public string ReportInfoCreated { get; set; }

        [JsonProperty("_ReportInfo.Modified")]
        public string ReportInfoModified { get; set; }

        [JsonProperty("_ReportInfo.CreatorVersion")]
        public string ReportInfoCreatorVersion { get; set; }
    }

    public partial class Dictionary
    {
        [JsonProperty("TableDataSource")]
        public TableDataSource[] TableDataSource { get; set; }

        [JsonProperty("Parameter")]
        public Parameter[] Parameter { get; set; }

        [JsonProperty("Total")]
        public Total[] Total { get; set; }
    }

    public partial class Parameter
    {
        [JsonProperty("_Name")]
        public string Name { get; set; }

        [JsonProperty("_DataType")]
        public DataType DataType { get; set; }

        [JsonProperty("_Expression", NullValueHandling = NullValueHandling.Ignore)]
        public string Expression { get; set; }
    }

    public partial class TableDataSource
    {
        [JsonProperty("Column")]
        public Column[] Column { get; set; }

        [JsonProperty("_Name")]
        public string Name { get; set; }

        [JsonProperty("_ReferenceName")]
        public string ReferenceName { get; set; }

        [JsonProperty("_DataType")]
        public DataType DataType { get; set; }

        [JsonProperty("_Enabled")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public bool Enabled { get; set; }
    }

    public partial class Column
    {
        [JsonProperty("_Name")]
        public string Name { get; set; }

        [JsonProperty("_DataType")]
        public DataType DataType { get; set; }

        [JsonProperty("_BindableControl", NullValueHandling = NullValueHandling.Ignore)]
        public string BindableControl { get; set; }
    }

    public partial class Total
    {
        [JsonProperty("_Name")]
        public string Name { get; set; }

        [JsonProperty("_Expression")]
        public string Expression { get; set; }

        [JsonProperty("_Evaluator")]
        public Name Evaluator { get; set; }

        [JsonProperty("_ResetAfterPrint", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public bool? ResetAfterPrint { get; set; }

        [JsonProperty("_PrintOn", NullValueHandling = NullValueHandling.Ignore)]
        public string PrintOn { get; set; }

        [JsonProperty("_EvaluateCondition", NullValueHandling = NullValueHandling.Ignore)]
        public string EvaluateCondition { get; set; }
    }

    public partial class ReportPage
    {
        [JsonProperty("PageHeaderBand")]
        public PageHeaderBand PageHeaderBand { get; set; }

        [JsonProperty("DataBand")]
        public DataBand DataBand { get; set; }

        [JsonProperty("PageFooterBand")]
        public PageFooterBand PageFooterBand { get; set; }

        [JsonProperty("_Name")]
        public string Name { get; set; }

        [JsonProperty("_RawPaperSize")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long RawPaperSize { get; set; }

        [JsonProperty("_LeftMargin")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long LeftMargin { get; set; }

        [JsonProperty("_TopMargin")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long TopMargin { get; set; }

        [JsonProperty("_RightMargin")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long RightMargin { get; set; }

        [JsonProperty("_BottomMargin")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long BottomMargin { get; set; }

        [JsonProperty("_MirrorMargins")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public bool MirrorMargins { get; set; }

        [JsonProperty("_FirstPageSource")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long FirstPageSource { get; set; }

        [JsonProperty("_OtherPagesSource")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long OtherPagesSource { get; set; }

        [JsonProperty("_Watermark.Enabled")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public bool WatermarkEnabled { get; set; }
    }

    public partial class DataBand
    {
        [JsonProperty("TextObject")]
        public TextObject[] TextObject { get; set; }

        [JsonProperty("_Name")]
        public Name Name { get; set; }

        [JsonProperty("_Top")]
        public string Top { get; set; }

        [JsonProperty("_Width")]
        public string Width { get; set; }

        [JsonProperty("_Height")]
        public string Height { get; set; }

        [JsonProperty("_DataSource")]
        public string DataSource { get; set; }

        [JsonProperty("_Filter")]
        public string Filter { get; set; }

        [JsonProperty("_PrintIfDatasourceEmpty")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public bool PrintIfDatasourceEmpty { get; set; }
    }

    public partial class TextObject
    {
        [JsonProperty("_Name")]
        public string Name { get; set; }

        [JsonProperty("_Left")]
        public string Left { get; set; }

        [JsonProperty("_Top", NullValueHandling = NullValueHandling.Ignore)]
        public string Top { get; set; }

        [JsonProperty("_Width")]
        public string Width { get; set; }

        [JsonProperty("_Height")]
        public string Height { get; set; }

        [JsonProperty("_CanGrow", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public bool? CanGrow { get; set; }

        [JsonProperty("_CanBreak", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public bool? CanBreak { get; set; }

        [JsonProperty("_Text")]
        public string Text { get; set; }

        [JsonProperty("_Font", NullValueHandling = NullValueHandling.Ignore)]
        public Font? Font { get; set; }

        [JsonProperty("_Format", NullValueHandling = NullValueHandling.Ignore)]
        public Format? Format { get; set; }

        [JsonProperty("_Format.UseLocale", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public bool? FormatUseLocale { get; set; }

        [JsonProperty("_Format.DecimalDigits", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long? FormatDecimalDigits { get; set; }

        [JsonProperty("_Format.DecimalSeparator", NullValueHandling = NullValueHandling.Ignore)]
        public FormatSeparator? FormatDecimalSeparator { get; set; }

        [JsonProperty("_Format.GroupSeparator", NullValueHandling = NullValueHandling.Ignore)]
        public FormatSeparator? FormatGroupSeparator { get; set; }

        [JsonProperty("_Format.CurrencySymbol", NullValueHandling = NullValueHandling.Ignore)]
        public string FormatCurrencySymbol { get; set; }

        [JsonProperty("_Format.PositivePattern", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long? FormatPositivePattern { get; set; }

        [JsonProperty("_Format.NegativePattern", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long? FormatNegativePattern { get; set; }

        [JsonProperty("_HorzAlign", NullValueHandling = NullValueHandling.Ignore)]
        public HorzAlign? HorzAlign { get; set; }

        [JsonProperty("_WordWrap", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public bool? WordWrap { get; set; }

        [JsonProperty("_Trimming", NullValueHandling = NullValueHandling.Ignore)]
        public string Trimming { get; set; }

        [JsonProperty("_PrintOn", NullValueHandling = NullValueHandling.Ignore)]
        public string PrintOn { get; set; }

        [JsonProperty("_Format.Format", NullValueHandling = NullValueHandling.Ignore)]
        public string FormatFormat { get; set; }
    }

    public partial class PageFooterBand
    {
        [JsonProperty("TextObject")]
        public TextObject[] TextObject { get; set; }

        [JsonProperty("_Name")]
        public string Name { get; set; }

        [JsonProperty("_Top")]
        public string Top { get; set; }

        [JsonProperty("_Width")]
        public string Width { get; set; }

        [JsonProperty("_Height")]
        public string Height { get; set; }
    }

    public partial class PageHeaderBand
    {
        [JsonProperty("TextObject")]
        public TextObject[] TextObject { get; set; }

        [JsonProperty("_Name")]
        public string Name { get; set; }

        [JsonProperty("_Width")]
        public string Width { get; set; }

        [JsonProperty("_Height")]
        public string Height { get; set; }
    }

    public enum DataType { SystemBoolean, SystemDateTime, SystemDouble, SystemInt32, SystemString };

    public enum Name { Data2 };

    public enum Font { Arial9Pt };

    public enum Format { Currency, Date };

    public enum FormatSeparator { Empty };

    public enum HorzAlign { Center, Right };

    public partial class testXml
    {
        //public static testXml FromJson(string json) => JsonConvert.DeserializeObject<testXml>(json, CodeBeautify.Converter.Settings);
    }

    public static class Serialize
    {
        //public static string ToJson(this testXml self) => JsonConvert.SerializeObject(self, CodeBeautify.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                DataTypeConverter.Singleton,
                NameConverter.Singleton,
                FontConverter.Singleton,
                FormatConverter.Singleton,
                FormatSeparatorConverter.Singleton,
                HorzAlignConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class DataTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(DataType) || t == typeof(DataType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "System.Boolean":
                    return DataType.SystemBoolean;
                case "System.DateTime":
                    return DataType.SystemDateTime;
                case "System.Double":
                    return DataType.SystemDouble;
                case "System.Int32":
                    return DataType.SystemInt32;
                case "System.String":
                    return DataType.SystemString;
            }
            throw new Exception("Cannot unmarshal type DataType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (DataType)untypedValue;
            switch (value)
            {
                case DataType.SystemBoolean:
                    serializer.Serialize(writer, "System.Boolean");
                    return;
                case DataType.SystemDateTime:
                    serializer.Serialize(writer, "System.DateTime");
                    return;
                case DataType.SystemDouble:
                    serializer.Serialize(writer, "System.Double");
                    return;
                case DataType.SystemInt32:
                    serializer.Serialize(writer, "System.Int32");
                    return;
                case DataType.SystemString:
                    serializer.Serialize(writer, "System.String");
                    return;
            }
            throw new Exception("Cannot marshal type DataType");
        }

        public static readonly DataTypeConverter Singleton = new DataTypeConverter();
    }

    internal class PurpleParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(bool) || t == typeof(bool?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            bool b;
            if (Boolean.TryParse(value, out b))
            {
                return b;
            }
            throw new Exception("Cannot unmarshal type bool");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (bool)untypedValue;
            var boolString = value ? "true" : "false";
            serializer.Serialize(writer, boolString);
            return;
        }

        public static readonly PurpleParseStringConverter Singleton = new PurpleParseStringConverter();
    }

    internal class NameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Name) || t == typeof(Name?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Data2")
            {
                return Name.Data2;
            }
            throw new Exception("Cannot unmarshal type Name");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Name)untypedValue;
            if (value == Name.Data2)
            {
                serializer.Serialize(writer, "Data2");
                return;
            }
            throw new Exception("Cannot marshal type Name");
        }

        public static readonly NameConverter Singleton = new NameConverter();
    }

    internal class FontConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Font) || t == typeof(Font?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Arial, 9pt")
            {
                return Font.Arial9Pt;
            }
            throw new Exception("Cannot unmarshal type Font");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Font)untypedValue;
            if (value == Font.Arial9Pt)
            {
                serializer.Serialize(writer, "Arial, 9pt");
                return;
            }
            throw new Exception("Cannot marshal type Font");
        }

        public static readonly FontConverter Singleton = new FontConverter();
    }

    internal class FormatConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Format) || t == typeof(Format?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Currency":
                    return Format.Currency;
                case "Date":
                    return Format.Date;
            }
            throw new Exception("Cannot unmarshal type Format");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Format)untypedValue;
            switch (value)
            {
                case Format.Currency:
                    serializer.Serialize(writer, "Currency");
                    return;
                case Format.Date:
                    serializer.Serialize(writer, "Date");
                    return;
            }
            throw new Exception("Cannot marshal type Format");
        }

        public static readonly FormatConverter Singleton = new FormatConverter();
    }

    internal class FluffyParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly FluffyParseStringConverter Singleton = new FluffyParseStringConverter();
    }

    internal class FormatSeparatorConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(FormatSeparator) || t == typeof(FormatSeparator?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == ".")
            {
                return FormatSeparator.Empty;
            }
            throw new Exception("Cannot unmarshal type FormatSeparator");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (FormatSeparator)untypedValue;
            if (value == FormatSeparator.Empty)
            {
                serializer.Serialize(writer, ".");
                return;
            }
            throw new Exception("Cannot marshal type FormatSeparator");
        }

        public static readonly FormatSeparatorConverter Singleton = new FormatSeparatorConverter();
    }

    internal class HorzAlignConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(HorzAlign) || t == typeof(HorzAlign?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Center":
                    return HorzAlign.Center;
                case "Right":
                    return HorzAlign.Right;
            }
            throw new Exception("Cannot unmarshal type HorzAlign");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (HorzAlign)untypedValue;
            switch (value)
            {
                case HorzAlign.Center:
                    serializer.Serialize(writer, "Center");
                    return;
                case HorzAlign.Right:
                    serializer.Serialize(writer, "Right");
                    return;
            }
            throw new Exception("Cannot marshal type HorzAlign");
        }

        public static readonly HorzAlignConverter Singleton = new HorzAlignConverter();
    }
}

